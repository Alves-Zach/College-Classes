#include <algorithm>
#include <iostream>
#include <list>
#include <string>
#include <vector>

using namespace std;

int main() {
    vector<short> pi = {3,1,4,1,5,9,2,6,5,3,5,8,9,7,9,3,2,3,8,4,6,2,6,4};
    string alpha="abcdefghijklmnopqrstuvwxyz", digits="0123456789";
    char cbuf[100] = {'\0'};    // contains 100 zero chars
    list<int> primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};
    short powers[] = {1,2,4,8,16,32,64};
    int ibuf[100];

    copy(alpha.begin(), alpha.end(), cbuf);
    cout << "Exercise 0: " << cbuf << "\n";
    reverse(cbuf.begin(), cbuf.end());
    cout << "Exercise 1: " << cbuf << "\n";
    transform(primes.begin(), primes.end(), ibuf.begin(), [](int n){return n++;});
    cout << "Exercise 2: " << ibuf << "\n";
    cout << "Exercise 3: ";
    if (any_of(primes.begin(), primes.end(), [](int n){return n%2 == 0;})) {
        cout << "div 2\n";
    }
    if (any_of(primes.begin(), primes.end(), [](int n){return n%42 == 0;})) {
        cout << " div 42\n";
    }
    cout << "Exercise 4: ";
    auto ptr = find(primes.begin(), primes.end(), 13);
    ptr++;
    cout << *ptr << "\n";
    cout << "Exercise 5: " << count(pi.begin(), pi.end(), 3);
    cout << "Exercise 6: " << count_if(pi.begin(), pi.end(), [](int n){return n>5;});
    cout << "Exercise 7: " << max_element(pi.begin(), pi.end());
    cout << "Exercise 8: ";
    sort(pi.begin(), pi.end());
    cout << pi << "\n";
    cout << "Exercise 9: ";
    auto nine = lower_bound(pi.begin(), pi.end(), 7);
    cout << *nine << "\n";
    cout << "Exercise 10: ";
    set_intersection(pi.begin(), pi.end(), powers.begin(), powers.end(), auto t>
    cout << ten << "\n";
}

